[{"D:\\React-Study\\infinite\\src\\index.js":"1","D:\\React-Study\\infinite\\src\\App.js":"2","D:\\React-Study\\infinite\\src\\components\\List.js":"3","D:\\React-Study\\infinite\\src\\components\\style\\List.js":"4","D:\\React-Study\\infinite\\src\\components\\NewsList.js":"5"},{"size":500,"mtime":1607251060254,"results":"6","hashOfConfig":"7"},{"size":183,"mtime":1610184875160,"results":"8","hashOfConfig":"7"},{"size":602,"mtime":1610185705602,"results":"9","hashOfConfig":"7"},{"size":593,"mtime":1610186076522,"results":"10","hashOfConfig":"7"},{"size":2615,"mtime":1610200143543,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"100y1q0",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"D:\\React-Study\\infinite\\src\\index.js",[],"D:\\React-Study\\infinite\\src\\App.js",["24"],"import React, { useState } from \"react\";\r\n\r\nimport NewsList from './components/NewsList';\r\n\r\nconst App = () => {\r\n  return (\r\n    <NewsList></NewsList>\r\n  )\r\n};\r\n\r\nexport default App;","D:\\React-Study\\infinite\\src\\components\\List.js",["25"],"D:\\React-Study\\infinite\\src\\components\\style\\List.js",[],"D:\\React-Study\\infinite\\src\\components\\NewsList.js",["26","27"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport List from \"./List\";\r\nimport * as S from \"./style/List\";\r\n\r\nconst NewsList = () => {\r\n  const [articles, setArticles] = useState([]);\r\n  //API로 부터 받아온 다음 페이지 데ㅣ터 저장\r\n  const [loading, setLoading] = useState(false);\r\n  //추가 데이터를 로드하는지 아닌지\r\n  const [fetching, setFetching] = useState(false);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://newsapi.org/v2/everything?q=bitcoin&from=2020-12-09&sortBy=publishedAt&apiKey=48c7bc1d5b954bd8b43a2005d7ac0037\"\r\n      );\r\n      setArticles(response.data.articles);\r\n      console.log(response);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const infiniteScroll = useCallback(() => {\r\n    let scrollHeight = Math.max(\r\n      document.documentElement.scrollHeight,\r\n      document.body.scrollHeight\r\n    );\r\n    let scrollTop = Math.max(\r\n      document.documentElement.scrollTop,\r\n      document.body.scrollTop\r\n    );\r\n    let clientHeight = document.documentElement.clientHeight;\r\n\r\n    if (scrollTop + clientHeight === scrollHeight && fetching === false) {\r\n      fetchMoreData();\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n\r\n    window.addEventListener(\"scroll\", infiniteScroll, true);\r\n    //스크롤 이벤트를 꼭 삭제 해줘야함\r\n    return () => window.removeEventListener(\"scroll\", infiniteScroll, true);\r\n  }, []);\r\n\r\n  const fetchMoreData = async () => {\r\n    setFetching(true);\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://newsapi.org/v2/everything?q=bitcoin&from=2020-12-09&sortBy=publishedAt&apiKey=48c7bc1d5b954bd8b43a2005d7ac0037\"\r\n      );\r\n      console.log(response);\r\n      const fetchData = response.data.articles; //피드데이터 부분\r\n      //기존 데이터 배열과 새로 받아온 데이터 배열을 합쳐 새 배열을 만듬\r\n      // const mergedData = articles.concat(...fetchData);\r\n      setArticles((mergedData) => mergedData.concat(fetchData));\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n    setFetching(false);\r\n  };\r\n\r\n  //로딩중\r\n  if (loading) {\r\n    return <p>대기중...</p>;\r\n  }\r\n\r\n  if (!articles) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <S.Body>\r\n        <S.Title>오늘의 News</S.Title>\r\n        {articles.map((article) => (\r\n          <List key={article.url} article={article}></List>\r\n        ))}\r\n      </S.Body>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewsList;\r\n",{"ruleId":"28","severity":1,"message":"29","line":1,"column":17,"nodeType":"30","messageId":"31","endLine":1,"endColumn":25},{"ruleId":"32","severity":1,"message":"33","line":12,"column":13,"nodeType":"34","endLine":12,"endColumn":69},{"ruleId":"35","severity":1,"message":"36","line":28,"column":26,"nodeType":"30","endLine":28,"endColumn":37},{"ruleId":"35","severity":1,"message":"37","line":50,"column":6,"nodeType":"38","endLine":50,"endColumn":8,"suggestions":"39"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","React Hook useEffect has a missing dependency: 'infiniteScroll'. Either include it or remove the dependency array.","ArrayExpression",["40"],{"desc":"41","fix":"42"},"Update the dependencies array to be: [infiniteScroll]",{"range":"43","text":"44"},[1475,1477],"[infiniteScroll]"]