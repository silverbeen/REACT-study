[{"D:\\React-Study\\infinite\\src\\index.js":"1","D:\\React-Study\\infinite\\src\\App.js":"2","D:\\React-Study\\infinite\\src\\components\\Allitem.js":"3","D:\\React-Study\\infinite\\src\\components\\List.js":"4","D:\\React-Study\\infinite\\src\\components\\style\\List.js":"5","D:\\React-Study\\infinite\\src\\components\\NewsList.js":"6"},{"size":500,"mtime":1607251060254,"results":"7","hashOfConfig":"8"},{"size":183,"mtime":1610184875160,"results":"9","hashOfConfig":"8"},{"size":1946,"mtime":1609504651420,"results":"10","hashOfConfig":"8"},{"size":602,"mtime":1610185705602,"results":"11","hashOfConfig":"8"},{"size":593,"mtime":1610186076522,"results":"12","hashOfConfig":"8"},{"size":2415,"mtime":1610195732000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"100y1q0",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"D:\\React-Study\\infinite\\src\\index.js",[],"D:\\React-Study\\infinite\\src\\App.js",["28"],"import React, { useState } from \"react\";\r\n\r\nimport NewsList from './components/NewsList';\r\n\r\nconst App = () => {\r\n  return (\r\n    <NewsList></NewsList>\r\n  )\r\n};\r\n\r\nexport default App;","D:\\React-Study\\infinite\\src\\components\\Allitem.js",["29"],"D:\\React-Study\\infinite\\src\\components\\List.js",["30"],"D:\\React-Study\\infinite\\src\\components\\style\\List.js",[],"D:\\React-Study\\infinite\\src\\components\\NewsList.js",["31"],"import React, { useState, useEffect,useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport List from \"./List\";\r\nimport * as S from \"./style/List\";\r\n\r\nconst NewsList = () => {\r\n\tconst [articles, setArticles] = useState([]);\r\n\t//API로 부터 받아온 다음 페이지 데ㅣ터 저장\r\n\tconst [articlesPaging, setArticlesPaging] = useState({next : undefined})\r\n  const [loading, setLoading] = useState(false);\r\n\t\r\n\t//추가 데이터를 로드하는지 아닌지\r\n\tconst [fetching, setFetching] = useState(false);\r\n\t\r\n\tconst fetchData = async () => {\r\n\t\tsetLoading(true);\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst response = await axios.get(\r\n\t\t\t\t\"http://newsapi.org/v2/everything?q=bitcoin&from=2020-12-09&sortBy=publishedAt&apiKey=9e13930af2ed45e49e472714d8a895fc\"\r\n\t\t\t);\r\n\t\t\tsetArticles(response.data.data);\r\n\t\t\tsetArticlesPaging(response.data.paging);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\tconst fetchMoreData = async () => {\r\n\t\tsetFetching(true);\r\n\r\n\t\tawait axios.get(articlesPaging.next)\r\n\t\t.then((response) => {\r\n\t\t\tconst fetchData = response.data.data; // 피드 데이터 부분\r\n\t\t\t//기존 데이터 배열과 새로 받아온 데이터 배열을 합쳐 새 배열을 만든다.\r\n\t\t\tconst mergedData = articles.concat(...fetchData);\r\n\t\t\tsetArticles(mergedData);\r\n\t\t});\r\n\t\tsetFetching(false);\r\n\t}\r\n\r\n\r\n  const infiniteScroll = useCallback(() => {\r\n    let scrollHeight = Math.max(\r\n      document.documentElement.scrollHeight,\r\n      document.body.scrollHeight\r\n    );\r\n    let scrollTop = Math.max(\r\n      document.documentElement.scrollTop,\r\n      document.body.scrollTop\r\n    );\r\n    let clientHeight = document.documentElement.clientHeight;\r\n\r\n    if (scrollTop + clientHeight === scrollHeight && fetching === false) {\r\n\t\t\tfetchMoreData();\r\n\t\t}\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n\t\twindow.addEventListener(\"scroll\", infiniteScroll);\r\n\t\t//스크롤 이벤트를 꼭 삭제 해줘야함\r\n    return () => window.removeEventListener(\"scroll\", infiniteScroll);\r\n  }, [infiniteScroll]);\r\n\r\n  //로딩중\r\n  if (loading) {\r\n    return <p>대기중...</p>;\r\n  }\r\n\r\n  if (!articles) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <S.Body>\r\n        <S.Title>오늘의 News</S.Title>\r\n        {articles.map((article) => (\r\n          <List key={article.url} article={article}></List>\r\n        ))}\r\n      </S.Body>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewsList;\r\n",{"ruleId":"32","severity":1,"message":"33","line":1,"column":17,"nodeType":"34","messageId":"35","endLine":1,"endColumn":25},{"ruleId":"32","severity":1,"message":"36","line":53,"column":13,"nodeType":"34","messageId":"35","endLine":53,"endColumn":21},{"ruleId":"37","severity":1,"message":"38","line":12,"column":13,"nodeType":"39","endLine":12,"endColumn":69},{"ruleId":"40","severity":1,"message":"41","line":44,"column":26,"nodeType":"34","endLine":44,"endColumn":37},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'newsList' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?"]